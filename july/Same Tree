/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        List<Integer> l1 = new ArrayList<>();
        List<Integer> l2 = new ArrayList<>();
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null)
            return true;
        if((p==null && q!=null) || (q==null && p!=null))
            return false;
        solve(p,l1);
        solve(q,l2);
        if(l1.equals(l2))
            return true;
        else
            return false;
    }
    
    public void solve(TreeNode s,List<Integer> l){
        Queue<TreeNode> q1 = new LinkedList<>();
        q1.add(s);
        l.add(s.val);
        while(!q1.isEmpty()){
            TreeNode temp=q1.remove();
            if(temp.left!=null){
                q1.add(temp.left);
                l.add(temp.left.val);
            }
            if(temp.left==null)
                l.add(null);
            if(temp.right!=null){
                q1.add(temp.right);
                l.add(temp.right.val);
            }
            else
                l.add(null);
        }
       // System.out.println(l);
    }
       
}
