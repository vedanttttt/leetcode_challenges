class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        findAll(nums,res,curr,visited);
        return res;
    }
    
    private void findAll(int[] nums,List<List<Integer>> res,List<Integer> curr,boolean[] visited){
        if(nums.length==curr.size())
            res.add(new ArrayList(curr));
        
        for(int i=0;i<nums.length;i++){
            if(!visited[i]){
                visited[i]=true;
                curr.add(nums[i]);
                findAll(nums,res,curr,visited);
                visited[i]=false;
                curr.remove(curr.size()-1);
                while(i<nums.length-1 && nums[i+1]==nums[i])
                    i++;
            }
        }
    }
}
