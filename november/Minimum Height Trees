class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();
        int[] degree = new int[n];
        
        if(n==1){
            res.add(0);
            return res;
        }
        
        for(int i=0;i<n;i++){
            adj.add(i,new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            degree[edges[i][0]]++;
            degree[edges[i][1]]++;
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        Queue<Integer> q = new LinkedList<>();
        
        for(int i=0;i<n;i++){
            if(degree[i]==1)
                q.add(i);
        }
        
        while(n>2){
            int size=q.size();
            n -= size;
            
            while(size-- >0){
                int v = q.poll();
                for(int i:adj.get(v)){
                    degree[i]--;
                    if(degree[i]==1){
                        q.add(i);
                    }
                }
            }
        }
        
        res.addAll(q);
        return res;
    }
}
