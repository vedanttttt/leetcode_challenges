class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(res,0,candidates,target,new ArrayList<>());
        return res;
    }
    
    public void dfs(List<List<Integer>> res,int index,int[] candidates,int target,List<Integer> current){
        if(target<0)
            return;
        if(target==0){
            res.add(new ArrayList(current));
            return;
        }
        
        for(int i=index;i<candidates.length;i++){
            current.add(candidates[i]);
            dfs(res,i,candidates,target-candidates[i],current);
            current.remove(current.size()-1);
        }
    }
}
